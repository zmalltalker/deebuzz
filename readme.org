* Zmalltalker learns Dbus
  I've been meaning to for a long time, but seeing my buddy [[http://twitter.com/thomanil][@thomanil]]
  shelling out to call Ruby from Emacs made me invest a few minutes of
  my life into learning this stuff. As it turns out, it wasn't all
  that difficult.

  I've created a couple of files in here, that you should be able to
  run on a Linux machine. Get one if you don't already have one.

** Run server.rb under ruby
   There's a Gemfile, so you can simply do a
#+BEGIN_SRC shell
bundle install
bundle exec ruby server.rb
#+END_SRC

   Not much will happen, you just set up a "mail server". Don't worry,
   it won't do anything interesting. Keep it running.

** Run client.rb under Ruby

   Same story here
#+BEGIN_SRC shell
bundle exec ruby client.rb
#+END_SRC

   This time you'll see some output, but not in the same
   terminal. Rather, your "mail server" will print some nasty
   messages, "delivering mail" for your Ruby client.

   Keep the client running as well, as it sets up a listener for a
   DBus signal.

** Run ./sample.sh
   This time you won't Ruby, just run it

#+BEGIN_SRC shell
./sample.sh
#+END_SRC

   This time, both your server and client terminals will start acting
   up. Congratulations: you just set up three way IPC using DBus!

** Still with me?
   For once I've added some comments to the top of source code. It
   should explain what's going on, as well as show the world my
   ignorance.

   If you think this is as fun as I think, there's a [[https://github.com/mvidner/ruby-dbus/blob/master/doc/Tutorial.md][fairly decent
   explanation of DBus in Ruby]] that you could read.
** Bus activation
   Now this is where it gets fun. Instead of manually starting your
   DBus server, wouldn't it be cool if it was just started whenever
   it's needed? DBus has this really cool mechanism called bus
   activation. Instead of manually ensuring that a program with a
   given name on the bus is running, Dbus can be told how to start a
   program providing it. Making this work is really easy. If you have
   a look in =/usr/share/dbus-1/services= you'll find a bunch of files
   with a =.service= suffix. These files let DBus know about existing
   bus names on your machine and how to get them running. And DBus
   will only start it once within a given context. So if you use the
   session bus, DBus will start the program the first time it's
   requested (unless it's already running).

   To make the =server.rb= program (which has the name
   =net.kjeldahlnilsson.mail= on the bus, add this file to
   =/usr/share/dbus-1/services/thomanil.service=:

#+BEGIN_EXAMPLE
[D-BUS Service]
Name=net.kjeldahlnilsson.mail
Exec=/home/marius/Projects/deebuzz/server.rb
#+END_EXAMPLE

   Now, instead of starting server.rb manually, simply run the
   client.rb script and see what happens.

   This is so cool I had to make [[http://ascii.io/a/1487][a screencast]] to prove it works.
** Doing it in Emacs
   I just had to. The supplied mail.el uses the Emacs DBus library to run as a client
   to the provided Ruby server.
** Disclaimer
   The *real* reason I wanted to learn DBus was that it's required
   knowledge to play with Systemd. More about that another time.
